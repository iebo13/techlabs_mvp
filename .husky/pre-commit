#!/usr/bin/env sh

# TechLabs MVP Pre-commit Hook
# Runs comprehensive quality checks before allowing commits
# Based on Husky best practices and conventional commits standards

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    printf "${BLUE}🔍 $1${NC}\n"
}

print_success() {
    printf "${GREEN}✅ $1${NC}\n"
}

print_warning() {
    printf "${YELLOW}⚠️  $1${NC}\n"
}

print_error() {
    printf "${RED}❌ $1${NC}\n"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Check if node is available
if ! command -v node > /dev/null 2>&1; then
    print_error "Node.js is required but not installed"
    exit 1
fi

# Check if npm is available
if ! command -v npm > /dev/null 2>&1; then
    print_error "npm is required but not installed"
    exit 1
fi

print_status "Starting comprehensive pre-commit quality checks..."

# Check if precommit script exists
if [ ! -f "scripts/precommit-checks.js" ]; then
    print_error "Pre-commit checks script not found at scripts/precommit-checks.js"
    exit 1
fi

# Run comprehensive quality checks
print_status "Running quality validation suite..."
if node scripts/precommit-checks.js; then
    print_success "All pre-commit quality checks passed!"
    print_success "Commit is ready to proceed 🚀"
else
    print_error "Pre-commit checks failed!"
    print_warning "Please fix the issues above before committing"
    print_warning "To bypass hooks temporarily: git commit --no-verify"
    exit 1
fi

# Additional security check for sensitive files
print_status "Checking for sensitive files..."
if git diff --cached --name-only | grep -E '\.(env|key|pem|p12|pfx)$'; then
    print_warning "Potential sensitive files detected in staging area"
    print_warning "Please verify these files should be committed"
fi

# Check for large files
print_status "Checking for large files..."
large_files=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ] && [ $(stat -f%z "{}" 2>/dev/null || stat -c%s "{}" 2>/dev/null || echo 0) -gt 1048576 ]; then echo "{}"; fi')
if [ -n "$large_files" ]; then
    print_warning "Large files detected (>1MB):"
    echo "$large_files" | while read -r file; do
        print_warning "  - $file"
    done
    print_warning "Consider using Git LFS for large files"
fi

print_success "Pre-commit hook completed successfully! ✨"